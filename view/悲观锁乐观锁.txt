为什么要用锁,是在存在多个线程处理一个共享数据时经常需要考虑的问题. 比如高并发下的超发问题.

如抢购商品时,要解决超发问题.在处理商品的下单逻辑前,首先我们肯定需要判断商品的剩余数量,如果商品数量大于1,就继续处理下单业务.但实际上是存在问题的.这个数字可能会多个线程同时判断,放行后都会执行下单的业务代码,都会下单成功,就出现超发问题.

对于共享数据被多个线程同时处理,最简单的是加锁.如悲观锁,让某一个线程独占资源,进行下单业务,其他请求过来只能等候锁的释放.当锁释放后,其他请求才有机会获取锁,其他请求判断数量是否大于1,如果是大于,就继续处理,如果为0,那么就直接响应商品售空.

上面用悲观锁可以解决数据安全,防止超发的问题.但存在一个问题.锁是相当占用资源的,其他请求会等待锁的状态,不断去判断锁的状态,整个过程,数据都处于加锁状态.会造成资源的浪费,此外更大的问题是造成响应时间会变长. 这种方案在高并发情景下,可能响应的时间更长(更多的请求在排队,被cpu的切换处理的时间更长),那么一定会让客户的体验不好. 所以抢购,秒杀,促销等高并发场景不用悲观锁.

用乐观锁的方案. 请求处理前依旧会判断商品的数量.但是不用加锁,而是相对而言,称为乐观锁.
乐观锁的机制,思路是在id, 和 use_count 字段的基础上再添加一个字段version. 
假设一张表两个字段，一个id，一个use_count。表里存了100个id，每个id对应自己的use_count。再添加version字段
多个请求处理同一个id(抢购同一个商品),可用数量use_count此时为1,version为999.  所有的请求select查询数据后,判断还有商品都继续向后执行.(这就是与悲观锁的不同,并没有加锁,只让一个请求继续执行下单代码)将version加1,就都是1000,所有请求都执行了下单逻辑(包含多个表的操作如订单表),在更新数据库数据之前(下单成功之前),成功后都应该去修改商品的use_count减一.
此时判断当前缓存(或者数据库)中当前version的值,和请求的version值对比,第一个请求到达,(此时才开始加锁,利用数据库自带的行级锁,查询的sql上for update 即可),判断如果请求version大于当前version,那么就进行处理,将当前version+1.并且更新到数据库中(可以异步). 此后
其他的请求被处理的时候,version都是等于或者小于当前的version. 都做异常处理,响应商品已经无货. 这就是用乐观锁解决超发的问题.




此外.这里总结一下高并发的处理方案.
高并发如秒杀,抢购,促销.
将秒杀和抢购单独列出来,他们和促销有所不同,秒杀和抢购的请求可以舍弃一部分(在开始就可以),而促销就不应该,而是应该把所有的请求都接受,在应用服务器中去处理,除非超发才做具体的拒绝.

秒杀和抢购,首先对服务器的压力非常大,需要多种技术组合来应对高并发. 比如限流,静态化,静态资源和应用资源的分离,分布式集群(基本的),缓存,异步消息队列等技术
压力的位置来源,一是在秒杀和抢购前,用户的行为通常是非频繁的刷新页面.如果这些页面都有后台应用服务器来动态生成,肯定是不现实的,应该用静态化页面的技术,即当页面第一次被访问的时候,首先访问静态化页面服务器,在静态页中查找时候有该商品页面,如果存在就直接从静态化页面服务器响应,如果没有,就向应用服务器发出请求,动态生成页面响应给客户端,并且将这个页面缓存到静态页面服务器上保存.html静态页面的响应速度是最快的,相比较动态响应页面更适合高并发. 注意,最好这些静态页面不要有数据需要更改,完全静态.但是依旧有业务场景是他的部分数据是动态的,这个也没有关系,只要大部分数据是静态化的,做静态化是有意义的. 对于必要的少部分数据是动态的,如商品的收藏数,商品的评价,如商品的剩余数量.在秒杀抢购之前商品的正常售卖会有少部分数据的变化.
这个用其他技术来解决,如页面内置js代码,定时发送请求最新数据,进行更新. 这种方案并不是最佳方案.我也实施过这种方案,我们用另外一种方案,消息队列方案, 比如商品的库存发生了变化,在订单服务器中进行库存数据更新时,向rabbitmq发送消息, 静态页面服务器监听到消息队列中有消息,删除原来的旧页面,更新页面缓存到静态页面服务器中.当然也可以只是删除并不更新,等下次请求再更新,但最好是及时更新,或者收到消息后定时更新,这样更能应对高并发. 

压力来源二,除了页面的频繁请求的压力,还有在抢购的那一刻,必然超大量请求会突然过来,在应用服务器之前会用nginx作为请求的入口,nginx做集群是必然的,避免单点故障也能缓解一定的压力. 但还不够,还应该对请求进行限流(具体如何限流我也不知道),这里有令牌桶算法,漏水桶算法等,配置是基于这些算法. 只有拥有令牌的请求或者在桶满的时候可以到后台应用服务器,其他请求没能取得令牌,漫出的都返回抢购失败. 当然在这里也可以用更简单的方案,部署更多的nginx来应对更多的请求(如在促销的时候,就不应该让这些请求抛掉).
接下来到后台应用服务群里处理请求(这些请求不会压垮后台服务群),zuul网关服务器,动态路由到订单服务器进行处理. 此时还是要面临多个高并发问题,数据库的读写效率不高,数据库是硬盘上存储,读写效率低,并且最大连接不高,我们需要更快读写速度的数据库,处理并发更强劲的数据库,这里就要用到redis非关系型数据库,他是内存上的数据库,读写效率更高,并且应该高并发能力更强,同时处理十万级别的请求.所以应该在这里用redis数据库才缓存下单数据. 如保持订单信息.
这里还面临一个超发的问题,乐观锁中也进行了说明. 用乐观锁机制来处理超发问题. 此外订单信息不能一直保存在redis中,首先redis虽然可以做持久化处理,但它的数据存储容量有限,并且有可能会出现丢失信息的问题(redis也会做集群,分片时候需要??分片是什么??),所以应该将订单信息数据从redis中读取,并备份到mysql. 这里可以另外部署一台服务器专门处理这个事物.从redis中读取订单信息,慢慢将这些数据批量备份到mysql. 这就是redis缓存的一个应用.
此外乐观锁解决超发问题中的id,use_count和version,这个数据也应该从mysql中读取缓存到reids中,基于内存,读写效率高.

补充其他高并发的技术,静态资源和应用资源的分离,如页面中的视频等超大数据,应该用cdn节点服务器,将静态资源和应用资源分离.
分布式集群,分布式即将一个整体的服务如订单服务页面服务等进行拆分,这本身就是一种分流手段,将多个资源请求业务请求进行分发到服务集群上进行处理,多个服务器响应更快. 集群就是将一个服务进行副本备份,防止单点故障蔓延拖垮整个服务. 分布式集群框架就是解决访问量大,综合服务的解决方案,高可用,高复用. 同时扩展性高,业务需要升级添加服务,或者服务群需要扩容,都可以很好的解决,如注册新的服务,添加集群.

nginx的作用.nginx作为一个反向代理服务器,监听端口,按照配置规则将服务进行分发.还可以根据规则有选择的进行分发.如静态页面的服务实际上也可以放在nginx中,nginx首先它也是一台服务器.


鉴权服务器的解决方案待续...  jwt+rsa

消息队列的丢失问题
